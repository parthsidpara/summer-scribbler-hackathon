{
  "metadata": {
    "name": "MapItFlow",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align: center; margin: -10px -20px 0 -20px; background: linear-gradient(135deg, #fffacd 0%, #fff8dc 100%); padding: 50px 30px; position: relative; overflow: hidden; box-shadow: 0 8px 32px rgba(89, 72, 9, 0.1);\">\n  <div style=\"position: absolute; top: -50px; left: -50px; width: 100px; height: 100px; background: radial-gradient(circle, rgba(255, 250, 205, 0.8) 0%, transparent 70%); border-radius: 50%;\"></div>\n  <div style=\"position: absolute; bottom: -30px; right: -30px; width: 80px; height: 80px; background: radial-gradient(circle, rgba(255, 248, 220, 0.6) 0%, transparent 70%); border-radius: 50%;\"></div>\n  \n  <div style=\"transform: translateY(-5px); animation: float 3s ease-in-out infinite;\">\n    <h1 style=\"color: #594809; font-size: 60px; margin-bottom: -10px; text-shadow: 2px 2px 4px rgba(89, 72, 9, 0.1); filter: drop-shadow(0 4px 8px rgba(89, 72, 9, 0.2));\">🏞</h1>\n  </div>\n  \n  <h1 style=\"color: #594809; font-size: 52px; margin-bottom: 15px; font-weight: 700; letter-spacing: -1px; text-shadow: 2px 2px 4px rgba(89, 72, 9, 0.1); background: linear-gradient(45deg, #594809, #8b6914); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;\">MapItFlow</h1>\n  \n  <div style=\"height: 3px; width: 80px; background: linear-gradient(90deg, #594809, #8b6914); margin: 0 auto 20px; border-radius: 2px; box-shadow: 0 2px 4px rgba(89, 72, 9, 0.3);\"></div>\n  \n  <p style=\"color: #594809; font-size: 20px; margin: 0; font-family: 'Comic Sans MS', 'Chalkboard SE', 'Bradley Hand ITC', 'Marker Felt', cursive, sans-serif; line-height: 1.6; font-weight: 500; text-shadow: 1px 1px 2px rgba(89, 72, 9, 0.1);\">\n    Mapping progress, flowing success.<br>\n    <span style=\"font-size: 16px; opacity: 0.8; font-style: italic;\">Built for Summer of Scribbling 2025</span>\n  </p>\n</div>\n\n<div style=\"text-align: left; background: linear-gradient(135deg, #eef2f7 0%, #f8fbff 100%); padding: 45px 35px; border-radius: 0 0 20px 20px; margin: -10px -20px 10px -20px; position: relative; box-shadow: 0 8px 32px rgba(68, 68, 68, 0.08); border-top: 4px solid #594809;\">\n  <div style=\"position: absolute; top: 0; left: 0; right: 0; height: 1px; background: linear-gradient(90deg, transparent, #594809, transparent);\"></div>\n  \n  <h2 style=\"margin-bottom: 25px; font-size: 28px; color: #2c3e50; font-weight: 600; text-align: center; position: relative; padding-bottom: 10px;\">\n    About MapItFlow\n    <div style=\"position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 60px; height: 3px; background: linear-gradient(90deg, #594809, #8b6914); border-radius: 2px;\"></div>\n  </h2>\n  \n  <div style=\"max-width: 700px; margin: 0 auto;\">\n    <div style=\"background: white; padding: 25px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05); border-left: 4px solid #594809;\">\n      <h3 style=\"color: #2c3e50; font-size: 20px; margin-bottom: 12px; font-weight: 600;\">🚀 Project Details</h3>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7; margin-bottom: 8px;\"><strong>Smart PDF Processing:</strong> Upload your syllabus PDF and watch as our AI transforms it into a comprehensive, interactive learning roadmap tailored to your curriculum.</p>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7; margin-bottom: 8px;\"><strong>AI-Powered Guidance:</strong> Engage in intelligent conversations with our AI assistant about your roadmap, get study tips, clarifications, and personalized learning strategies.</p>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7;\"><strong>Flexible Data Management:</strong> Seamlessly import and export your roadmaps, ensuring your learning progress is always portable and backed up.</p>\n\t<p style=\"color: #555; font-size: 16px; line-height: 1.7;\"><strong>Core Technology:</strong> HTML, CSS, JS, PDF.JS, GeminiAPI</p>\n    </div>\n    \n    <div style=\"background: white; padding: 25px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05); border-left: 4px solid #2980b9;\">\n      <h3 style=\"color: #2c3e50; font-size: 20px; margin-bottom: 12px; font-weight: 600;\">📊 Progress Tracking</h3>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7;\">Stay motivated with our intuitive checklist system that lets you track your learning progress in real-time. Mark completed topics, monitor your advancement, and celebrate your achievements as you work through your personalized roadmap.</p>\n    </div>\n    \n    <div style=\"background: white; padding: 25px; border-radius: 15px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05); border-left: 4px solid #27ae60;\">\n      <h3 style=\"color: #2c3e50; font-size: 20px; margin-bottom: 12px; font-weight: 600;\">🎨 Modern Design</h3>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7;\">Built with Tailwind CSS for a sleek, responsive, and modern user interface that works beautifully across all devices. Experience learning with style and functionality combined.</p>\n    </div>\n  </div>\n  \n  <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px dashed #d1d9e0;\">\n    <p style=\"color: #7f8c8d; font-size: 14px; font-style: italic;\">Transform your learning journey from scattered notes to structured success</p>\n    <p style=\"color: #7f8c8d; font-size: 14px; font-style: italic;\">Note: If the roadmap is not generated in first map, it might be due to API or Dependency error, re-run the code in that case</p>\n\n  </div>\n</div>\n\n<style>\n@keyframes float {\n  0%, 100% { transform: translateY(-5px); }\n  50% { transform: translateY(-15px); }\n}\n</style>",
      "status": "",
      "output": "<div style=\"text-align: center; margin: -10px -20px 0 -20px; background: linear-gradient(135deg, #fffacd 0%, #fff8dc 100%); padding: 50px 30px; position: relative; overflow: hidden; box-shadow: 0 8px 32px rgba(89, 72, 9, 0.1);\">\n  <div style=\"position: absolute; top: -50px; left: -50px; width: 100px; height: 100px; background: radial-gradient(circle, rgba(255, 250, 205, 0.8) 0%, transparent 70%); border-radius: 50%;\"></div>\n  <div style=\"position: absolute; bottom: -30px; right: -30px; width: 80px; height: 80px; background: radial-gradient(circle, rgba(255, 248, 220, 0.6) 0%, transparent 70%); border-radius: 50%;\"></div>\n  \n  <div style=\"transform: translateY(-5px); animation: float 3s ease-in-out infinite;\">\n    <h1 style=\"color: #594809; font-size: 60px; margin-bottom: -10px; text-shadow: 2px 2px 4px rgba(89, 72, 9, 0.1); filter: drop-shadow(0 4px 8px rgba(89, 72, 9, 0.2));\">🏞</h1>\n  </div>\n  \n  <h1 style=\"color: #594809; font-size: 52px; margin-bottom: 15px; font-weight: 700; letter-spacing: -1px; text-shadow: 2px 2px 4px rgba(89, 72, 9, 0.1); background: linear-gradient(45deg, #594809, #8b6914); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;\">MapItFlow</h1>\n  \n  <div style=\"height: 3px; width: 80px; background: linear-gradient(90deg, #594809, #8b6914); margin: 0 auto 20px; border-radius: 2px; box-shadow: 0 2px 4px rgba(89, 72, 9, 0.3);\"></div>\n  \n  <p style=\"color: #594809; font-size: 20px; margin: 0; font-family: 'Comic Sans MS', 'Chalkboard SE', 'Bradley Hand ITC', 'Marker Felt', cursive, sans-serif; line-height: 1.6; font-weight: 500; text-shadow: 1px 1px 2px rgba(89, 72, 9, 0.1);\">\n    Mapping progress, flowing success.<br>\n    <span style=\"font-size: 16px; opacity: 0.8; font-style: italic;\">Built for Summer of Scribbling 2025</span>\n  </p>\n</div>\n\n<div style=\"text-align: left; background: linear-gradient(135deg, #eef2f7 0%, #f8fbff 100%); padding: 45px 35px; border-radius: 0 0 20px 20px; margin: -10px -20px 10px -20px; position: relative; box-shadow: 0 8px 32px rgba(68, 68, 68, 0.08); border-top: 4px solid #594809;\">\n  <div style=\"position: absolute; top: 0; left: 0; right: 0; height: 1px; background: linear-gradient(90deg, transparent, #594809, transparent);\"></div>\n  \n  <h2 style=\"margin-bottom: 25px; font-size: 28px; color: #2c3e50; font-weight: 600; text-align: center; position: relative; padding-bottom: 10px;\">\n    About MapItFlow\n    <div style=\"position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 60px; height: 3px; background: linear-gradient(90deg, #594809, #8b6914); border-radius: 2px;\"></div>\n  </h2>\n  \n  <div style=\"max-width: 700px; margin: 0 auto;\">\n    <div style=\"background: white; padding: 25px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05); border-left: 4px solid #594809;\">\n      <h3 style=\"color: #2c3e50; font-size: 20px; margin-bottom: 12px; font-weight: 600;\">🚀 Project Details</h3>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7; margin-bottom: 8px;\"><strong>Smart PDF Processing:</strong> Upload your syllabus PDF and watch as our AI transforms it into a comprehensive, interactive learning roadmap tailored to your curriculum.</p>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7; margin-bottom: 8px;\"><strong>AI-Powered Guidance:</strong> Engage in intelligent conversations with our AI assistant about your roadmap, get study tips, clarifications, and personalized learning strategies.</p>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7;\"><strong>Flexible Data Management:</strong> Seamlessly import and export your roadmaps, ensuring your learning progress is always portable and backed up.</p>\n\t<p style=\"color: #555; font-size: 16px; line-height: 1.7;\"><strong>Core Technology:</strong> HTML, CSS, JS, PDF.JS, GeminiAPI</p>\n    </div>\n    \n    <div style=\"background: white; padding: 25px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05); border-left: 4px solid #2980b9;\">\n      <h3 style=\"color: #2c3e50; font-size: 20px; margin-bottom: 12px; font-weight: 600;\">📊 Progress Tracking</h3>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7;\">Stay motivated with our intuitive checklist system that lets you track your learning progress in real-time. Mark completed topics, monitor your advancement, and celebrate your achievements as you work through your personalized roadmap.</p>\n    </div>\n    \n    <div style=\"background: white; padding: 25px; border-radius: 15px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05); border-left: 4px solid #27ae60;\">\n      <h3 style=\"color: #2c3e50; font-size: 20px; margin-bottom: 12px; font-weight: 600;\">🎨 Modern Design</h3>\n      <p style=\"color: #555; font-size: 16px; line-height: 1.7;\">Built with Tailwind CSS for a sleek, responsive, and modern user interface that works beautifully across all devices. Experience learning with style and functionality combined.</p>\n    </div>\n  </div>\n  \n  <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px dashed #d1d9e0;\">\n    <p style=\"color: #7f8c8d; font-size: 14px; font-style: italic;\">Transform your learning journey from scattered notes to structured success</p>\n    <p style=\"color: #7f8c8d; font-size: 14px; font-style: italic;\">Note: If the roadmap is not generated in first map, it might be due to API or Dependency error, re-run the code in that case</p>\n\n  </div>\n</div>\n\n<style>\n@keyframes float {\n  0%, 100% { transform: translateY(-5px); }\n  50% { transform: translateY(-15px); }\n}\n</style>",
      "type": "html"
    },
    {
      "code": "await scrib.loadScript(\"https://cdn.tailwindcss.com\")\nawait scrib.loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\")\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\")\nscrib.loadScript(\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js\")",
      "status": "[21]<br><span style=\"font-size:8px\">858ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Function to configure the PDF.js worker\nfunction configurePdfJs() {\n    if (typeof pdfjsLib !== 'undefined') {\n        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\n        console.log('pdf.js worker configured.');\n    } else {\n        console.warn('pdfjsLib not found, retrying PDF.js worker configuration shortly...');\n        setTimeout(configurePdfJs, 200); \n    }\n}\n\nconfigurePdfJs();",
      "status": "[22]<br><span style=\"font-size:8px\">36ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "//>html\n<div class=\"min-h-screen\" id=\"scrib-div\">\n        <div class=\"fixed top-0 left-0 right-0 bg-white p-2.5 shadow-md z-50 hidden\" id=\"progressContainer\">\n            <div class=\"h-1.5 bg-gray-200 rounded-full overflow-hidden\">\n                <div class=\"h-full bg-purple-700 transition-all duration-300 ease-linear\" id=\"progressFill\" style=\"width: 0%;\"></div>\n            </div>\n            <div class=\"text-center text-sm text-gray-600 mt-1\" id=\"progressText\">0% Complete</div>\n        </div>\n\n        <div class=\"container max-w-6xl mx-auto bg-white rounded-lg shadow-[0_5px_15px_rgba(0,0,0,0.1),_3px_3px_0px_#D3D3D3] border border-[#B0B0B0] overflow-hidden mt-10\">\n            <div class=\"header bg-[#f7f3e9] text-[#4a4a4a] p-6 sm:p-8 text-center border-b-2 border-[#d1c7b8]\">\n                <h1 class=\"text-2xl sm:text-3xl mb-2 font-bold text-black\">🗺️ Learning Map Generator</h1>\n                <p class=\"text-sm sm:text-base opacity-90 text-gray-800\">Enter a topic or upload a syllabus PDF to generate a structured learning path</p>\n            </div>\n\n            <div class=\"input-section p-6 sm:p-8 bg-[#faf6ef] border-b border-[#e9e0d2]\">\n                <div class=\"input-group max-w-xl mx-auto flex flex-col gap-4\">\n                    <div class=\"file-input-container relative\">\n                        <label for=\"pdfInput\" class=\"file-input-label block p-3 border border-[#b0b0b0] rounded-md bg-white cursor-pointer text-center transition-all duration-300 hover:border-purple-600 hover:bg-[#faf6ef]\">\n                            📄 Upload Syllabus PDF\n                        </label>\n                        <input type=\"file\" id=\"pdfInput\" class=\"file-input absolute w-0 h-0 opacity-0\" accept=\".pdf\">\n                        <div id=\"fileName\" class=\"file-name mt-1 text-sm text-gray-600 text-center\"></div>\n                    </div>\n\n                    <div class=\"or-divider text-center text-gray-600 italic my-2\">- or -</div>\n\n                    <div class=\"input-row flex flex-col sm:flex-row gap-4\">\n                        <input type=\"text\" id=\"topicInput\" class=\"input-field flex-1 px-3 border border-[#b0b0b0] rounded-md text-base bg-white transition-all duration-300 focus:outline-none focus:border-purple-600 focus:ring-2 focus:ring-purple-600/20\" placeholder=\"Enter a topic (e.g., Quantum Physics, Machine Learning)\" maxlength=\"100\">\n                        <button id=\"generateBtn\" class=\"generate-btn p-3 bg-purple-700 text-white border border-purple-900 rounded-md text-base font-semibold cursor-pointer transition-all duration-300 min-w-[120px] hover:bg-purple-800 hover:-translate-y-0.5 disabled:opacity-60 disabled:cursor-not-allowed disabled:transform-none disabled:bg-gray-400 disabled:border-gray-500 disabled:shadow-none\">Generate Map</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"action-buttons flex gap-2.5 mt-4 justify-center p-4\">\n                <button id=\"exportBtn\" class=\"action-btn py-2 px-4 bg-purple-700 text-white rounded-md cursor-pointer flex items-center gap-1.5 hover:bg-purple-800 text-sm\">\n                    <span>💾</span> Export Roadmap\n                </button>\n                <button id=\"importBtn\" class=\"action-btn secondary py-2 px-4 bg-gray-600 text-white rounded-md cursor-pointer flex items-center gap-1.5 hover:bg-gray-700 text-sm\">\n                    <span>📂</span> Import Roadmap\n                </button>\n                <input type=\"file\" id=\"importInput\" accept=\".json\" class=\"hidden\">\n            </div>\n\n            <div class=\"view-toggle flex gap-2.5 my-4 justify-center\">\n                <button class=\"view-btn py-2 px-4 bg-[#f7f3e9] border border-[#d1c7b8] rounded-md cursor-pointer transition-all duration-300 text-sm\" id=\"roadmapViewBtn\">🗺️ Roadmap View</button>\n                <button class=\"view-btn py-2 px-4 bg-[#f7f3e9] border border-[#d1c7b8] rounded-md cursor-pointer transition-all duration-300 text-sm\" id=\"checklistViewBtn\">✓ Checklist View</button>\n                </div>\n\n            <div class=\"loading hidden text-center p-10 text-gray-700\" id=\"loading\">\n                <div class=\"spinner w-7 h-7 border-3 border-gray-100 border-t-purple-700 rounded-full mx-auto mb-4\"></div>\n                <p>Generating your learning map...</p>\n            </div>\n\n            <div class=\"map-container p-4 sm:p-8 min-h-[400px] overflow-auto bg-white\">\n                <div id=\"learningMap\" class=\"learning-map hidden\">\n                    </div>\n                <div id=\"checklistView\" class=\"checklist-container hidden p-5\">\n                    </div>\n                 </div>\n        </div> \n\t<button class=\"chat-toggle-btn fixed bottom-5 right-5 w-12 h-12 bg-purple-700 text-white border-none rounded-full cursor-pointer flex items-center justify-center text-2xl shadow-md z-[999] transition-transform duration-200 hover:scale-110\" id=\"mainChatToggle\">💬</button>\n\t<div class=\"chat-container fixed bottom-5 right-5 w-[90vw] max-w-md h-[500px] bg-white rounded-lg shadow-lg border border-[#B0B0B0] z-[1000] hidden flex-col resize-both overflow-hidden min-w-[300px] min-h-[350px]\" id=\"chatContainer\">\n            <div class=\"chat-header bg-[#f7f3e9] p-4 rounded-t-lg border-b border-[#d1c7b8] cursor-move flex justify-between items-center select-none\" id=\"chatHeader\">\n                <h3 class=\"m-0 text-lg text-[#4a4a4a]\">💬 Ask about the Roadmap</h3>\n                <button class=\"chat-toggle bg-transparent border-none text-xl cursor-pointer text-[#4a4a4a]\" id=\"chatToggle\">−</button>\n            </div>\n            <div class=\"chat-messages flex-grow overflow-y-auto p-4 bg-white\" id=\"chatMessages\">\n                </div>\n            <div class=\"chat-loading hidden text-center p-2.5 text-gray-600\" id=\"chatLoading\">\n                <div class=\"chat-spinner w-5 h-5 border-2 border-gray-100 border-t-purple-700 rounded-full mx-auto\"></div>\n            </div>\n            <div class=\"chat-input-container p-2.5 border-t border-[#e9e0d2] flex gap-2.5\">\n                <input type=\"text\" id=\"chatInput\" class=\"chat-input flex-1 py-2 px-3 border border-[#b0b0b0] rounded-md\" placeholder=\"Ask a question about the roadmap...\">\n                <button id=\"chatSend\" class=\"chat-send py-2 px-4 bg-purple-700 text-white border-none rounded-md cursor-pointer hover:bg-purple-800\">Send</button>\n            </div>\n            <div class=\"resize-handle absolute bottom-0 right-0 w-5 h-5 cursor-se-resize rounded-br-lg\"></div>\n        </div>\n\n    </div> ",
      "status": "[23]<br><span style=\"font-size:8px\">34ms<span></span></span>",
      "output": "\n<div class=\"min-h-screen\" id=\"scrib-div\">\n        <div class=\"fixed top-0 left-0 right-0 bg-white p-2.5 shadow-md z-50 hidden\" id=\"progressContainer\" style=\"display: none;\">\n            <div class=\"h-1.5 bg-gray-200 rounded-full overflow-hidden\">\n                <div class=\"h-full bg-purple-700 transition-all duration-300 ease-linear\" id=\"progressFill\" style=\"width: 0%;\"></div>\n            </div>\n            <div class=\"text-center text-sm text-gray-600 mt-1\" id=\"progressText\">0% Complete</div>\n        </div>\n\n        <div class=\"container max-w-6xl mx-auto bg-white rounded-lg shadow-[0_5px_15px_rgba(0,0,0,0.1),_3px_3px_0px_#D3D3D3] border border-[#B0B0B0] overflow-hidden mt-10\">\n            <div class=\"header bg-[#f7f3e9] text-[#4a4a4a] p-6 sm:p-8 text-center border-b-2 border-[#d1c7b8]\">\n                <h1 class=\"text-2xl sm:text-3xl mb-2 font-bold text-black\">🗺️ Learning Map Generator</h1>\n                <p class=\"text-sm sm:text-base opacity-90 text-gray-800\">Enter a topic or upload a syllabus PDF to generate a structured learning path</p>\n            </div>\n\n            <div class=\"input-section p-6 sm:p-8 bg-[#faf6ef] border-b border-[#e9e0d2]\">\n                <div class=\"input-group max-w-xl mx-auto flex flex-col gap-4\">\n                    <div class=\"file-input-container relative\">\n                        <label for=\"pdfInput\" class=\"file-input-label block p-3 border border-[#b0b0b0] rounded-md bg-white cursor-pointer text-center transition-all duration-300 hover:border-purple-600 hover:bg-[#faf6ef]\">\n                            📄 Upload Syllabus PDF\n                        </label>\n                        <input type=\"file\" id=\"pdfInput\" class=\"file-input absolute w-0 h-0 opacity-0\" accept=\".pdf\">\n                        <div id=\"fileName\" class=\"file-name mt-1 text-sm text-gray-600 text-center\"></div>\n                    </div>\n\n                    <div class=\"or-divider text-center text-gray-600 italic my-2\">- or -</div>\n\n                    <div class=\"input-row flex flex-col sm:flex-row gap-4\">\n                        <input type=\"text\" id=\"topicInput\" class=\"input-field flex-1 px-3 border border-[#b0b0b0] rounded-md text-base bg-white transition-all duration-300 focus:outline-none focus:border-purple-600 focus:ring-2 focus:ring-purple-600/20\" placeholder=\"Enter a topic (e.g., Quantum Physics, Machine Learning)\" maxlength=\"100\">\n                        <button id=\"generateBtn\" class=\"generate-btn p-3 bg-purple-700 text-white border border-purple-900 rounded-md text-base font-semibold cursor-pointer transition-all duration-300 min-w-[120px] hover:bg-purple-800 hover:-translate-y-0.5 disabled:opacity-60 disabled:cursor-not-allowed disabled:transform-none disabled:bg-gray-400 disabled:border-gray-500 disabled:shadow-none\" disabled=\"\">Generate Map</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"action-buttons flex gap-2.5 mt-4 justify-center p-4\">\n                <button id=\"exportBtn\" class=\"action-btn py-2 px-4 bg-purple-700 text-white rounded-md cursor-pointer flex items-center gap-1.5 hover:bg-purple-800 text-sm\">\n                    <span>💾</span> Export Roadmap\n                </button>\n                <button id=\"importBtn\" class=\"action-btn secondary py-2 px-4 bg-gray-600 text-white rounded-md cursor-pointer flex items-center gap-1.5 hover:bg-gray-700 text-sm\">\n                    <span>📂</span> Import Roadmap\n                </button>\n                <input type=\"file\" id=\"importInput\" accept=\".json\" class=\"hidden\">\n            </div>\n\n            <div class=\"view-toggle flex gap-2.5 my-4 justify-center\">\n                <button class=\"view-btn py-2 px-4 border rounded-md cursor-pointer transition-all duration-300 text-sm active bg-purple-700 text-white border-purple-900\" id=\"roadmapViewBtn\">🗺️ Roadmap View</button>\n                <button class=\"view-btn py-2 px-4 bg-[#f7f3e9] border border-[#d1c7b8] rounded-md cursor-pointer transition-all duration-300 text-sm text-[#4a4a4a]\" id=\"checklistViewBtn\">✓ Checklist View</button>\n                </div>\n\n            <div class=\"loading hidden text-center p-10 text-gray-700\" id=\"loading\">\n                <div class=\"spinner w-7 h-7 border-3 border-gray-100 border-t-purple-700 rounded-full mx-auto mb-4\"></div>\n                <p>Generating your learning map...</p>\n            </div>\n\n            <div class=\"map-container p-4 sm:p-8 min-h-[400px] overflow-auto bg-white\">\n                <div id=\"learningMap\" class=\"learning-map hidden\" style=\"display: block;\">\n                    </div>\n                <div id=\"checklistView\" class=\"checklist-container hidden p-5\" style=\"display: none;\">\n                    </div>\n                 </div>\n        </div> \n\t<button class=\"chat-toggle-btn fixed bottom-5 right-5 w-12 h-12 bg-purple-700 text-white border-none rounded-full cursor-pointer flex items-center justify-center text-2xl shadow-md z-[999] transition-transform duration-200 hover:scale-110\" id=\"mainChatToggle\">💬</button>\n\t<div class=\"chat-container fixed bottom-5 right-5 w-[90vw] max-w-md h-[500px] bg-white rounded-lg shadow-lg border border-[#B0B0B0] z-[1000] hidden flex-col resize-both overflow-hidden min-w-[300px] min-h-[350px]\" id=\"chatContainer\">\n            <div class=\"chat-header bg-[#f7f3e9] p-4 rounded-t-lg border-b border-[#d1c7b8] cursor-move flex justify-between items-center select-none\" id=\"chatHeader\">\n                <h3 class=\"m-0 text-lg text-[#4a4a4a]\">💬 Ask about the Roadmap</h3>\n                <button class=\"chat-toggle bg-transparent border-none text-xl cursor-pointer text-[#4a4a4a]\" id=\"chatToggle\">−</button>\n            </div>\n            <div class=\"chat-messages flex-grow overflow-y-auto p-4 bg-white\" id=\"chatMessages\">\n                </div>\n            <div class=\"chat-loading hidden text-center p-2.5 text-gray-600\" id=\"chatLoading\">\n                <div class=\"chat-spinner w-5 h-5 border-2 border-gray-100 border-t-purple-700 rounded-full mx-auto\"></div>\n            </div>\n            <div class=\"chat-input-container p-2.5 border-t border-[#e9e0d2] flex gap-2.5\">\n                <input type=\"text\" id=\"chatInput\" class=\"chat-input flex-1 py-2 px-3 border border-[#b0b0b0] rounded-md\" placeholder=\"Ask a question about the roadmap...\">\n                <button id=\"chatSend\" class=\"chat-send py-2 px-4 bg-purple-700 text-white border-none rounded-md cursor-pointer hover:bg-purple-800\">Send</button>\n            </div>\n            <div class=\"resize-handle absolute bottom-0 right-0 w-5 h-5 cursor-se-resize rounded-br-lg\"></div>\n        </div>\n\n    </div>  <br>",
      "type": "code"
    },
    {
      "code": "//>css\n.topic-node {\n    box-shadow: 1px 1px 0px #C0C0C0, 2px 2px 0px #C0C0C0;\n}\n\n.topic-node:hover {\n    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.1), 3px 3px 0 #C0C0C0;\n}\n\n.generate-btn {\n    box-shadow: 1px 1px 0 #5e3a80;\n}\n\n.generate-btn:hover {\n    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.input-field,\n.file-input-label {\n    border-style: dashed;\n}\n\n.header {\n    border-bottom-style: dashed;\n}\n\n.error-message {\n    border-style: dashed;\n}\n\n.checklist-section-title {\n    border-bottom-style: dashed;\n}\n\n.chat-header {\n    border-bottom-style: dashed;\n}\n\n.children-container {\n    border-top-style: dashed;\n}\n\n@media (max-width: 768px) {\n    .children-container .topic-node:not(:last-child)::after {\n        content: '';\n        display: block;\n        width: 3px;\n        height: 20px;\n        background: #777;\n        margin: 10px auto -10px;\n        border-radius: 2px;\n    }\n}\n\n.resize-handle {\n    background: linear-gradient(135deg, transparent 50%, #764ba2 50%);\n}\n\n.spinner,\n.chat-spinner {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n}",
      "status": "[24]<br><span style=\"font-size:8px\">34ms<span></span></span>",
      "output": "<style>\n.topic-node {\n    box-shadow: 1px 1px 0px #C0C0C0, 2px 2px 0px #C0C0C0;\n}\n\n.topic-node:hover {\n    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.1), 3px 3px 0 #C0C0C0;\n}\n\n.generate-btn {\n    box-shadow: 1px 1px 0 #5e3a80;\n}\n\n.generate-btn:hover {\n    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.input-field,\n.file-input-label {\n    border-style: dashed;\n}\n\n.header {\n    border-bottom-style: dashed;\n}\n\n.error-message {\n    border-style: dashed;\n}\n\n.checklist-section-title {\n    border-bottom-style: dashed;\n}\n\n.chat-header {\n    border-bottom-style: dashed;\n}\n\n.children-container {\n    border-top-style: dashed;\n}\n\n@media (max-width: 768px) {\n    .children-container .topic-node:not(:last-child)::after {\n        content: '';\n        display: block;\n        width: 3px;\n        height: 20px;\n        background: #777;\n        margin: 10px auto -10px;\n        border-radius: 2px;\n    }\n}\n\n.resize-handle {\n    background: linear-gradient(135deg, transparent 50%, #764ba2 50%);\n}\n\n.spinner,\n.chat-spinner {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n}</style> <br>",
      "type": "code"
    },
    {
      "code": "// Globals\nwindow.domElements = window.domElements || {};\nwindow.currentRoadmap = null;\nwindow.chatHistory = [];\nwindow.apiKey = 'AIzaSyBAUKcZBxjg7wPZ8igK9oPhlv3EXAKmbQc'; // Prompt for API key later if not added here\nwindow.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';\n\n// --- DOM Elements (cached for performance) ---\nfunction cacheDOMElements() {\n    console.log(\"Caching DOM elements...\");\n    window.domElements.generateBtn = document.getElementById('generateBtn');\n    window.domElements.topicInput = document.getElementById('topicInput');\n    window.domElements.pdfInput = document.getElementById('pdfInput');\n    window.domElements.fileNameDisplay = document.getElementById('fileName');\n    window.domElements.exportBtn = document.getElementById('exportBtn');\n    window.domElements.importBtn = document.getElementById('importBtn');\n    window.domElements.importInput = document.getElementById('importInput');\n    window.domElements.chatContainer = document.getElementById('chatContainer');\n    window.domElements.chatHeader = document.getElementById('chatHeader');\n    window.domElements.chatToggle = document.getElementById('chatToggle');\n    window.domElements.mainChatToggle = document.getElementById('mainChatToggle');\n    window.domElements.chatInput = document.getElementById('chatInput');\n    window.domElements.chatSend = document.getElementById('chatSend');\n    window.domElements.resizeHandle = window.domElements.chatContainer ? window.domElements.chatContainer.querySelector('.resize-handle') : null;\n    window.domElements.roadmapViewBtn = document.getElementById('roadmapViewBtn');\n    window.domElements.checklistViewBtn = document.getElementById('checklistViewBtn');\n    window.domElements.learningMapContainer = document.getElementById('learningMap');\n    window.domElements.checklistViewContainer = document.getElementById('checklistView');\n    window.domElements.progressContainer = document.getElementById('progressContainer');\n    window.domElements.progressFill = document.getElementById('progressFill');\n    window.domElements.progressText = document.getElementById('progressText');\n    window.domElements.loadingIndicator = document.getElementById('loading');\n    window.domElements.chatMessagesContainer = document.getElementById('chatMessages');\n    window.domElements.chatLoadingIndicator = document.getElementById('chatLoading');\n    window.domElements.mapDisplayContainer = document.querySelector('.map-container');\n}\n\n// --- Retry Mechanism for DOM Readiness ---\nfunction checkAndInit(attempts = 10, delay = 200) {\n    if (document.getElementById('scrib-div') && document.getElementById('generateBtn')) {\n        console.log(\"DOM elements found, initializing app...\");\n        runAppInitialization();\n    } else if (attempts > 0) {\n        console.warn(`DOM elements not found, retrying (${attempts} attempts left)...`);\n        setTimeout(() => checkAndInit(attempts - 1, delay), delay);\n    } else {\n        console.error(\"Failed to find DOM elements after retries. Check HTML cell execution and IDs.\");\n        showError(\"Error: Core UI elements not found. Please ensure HTML cells are executed first.\", document.body);\n    }\n}\n\n// --- Initialization Functions ---\nfunction initializeEventListeners() {\n    if (window.domElements.generateBtn) {\n        window.domElements.generateBtn.addEventListener('click', window.generateLearningMap);\n    } else {\n        console.error(\"generateBtn not found for event listener.\");\n    }\n\n    if (window.domElements.topicInput) {\n        window.domElements.topicInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') window.generateLearningMap();\n        });\n        window.domElements.topicInput.addEventListener('input', (e) => {\n            if (window.domElements.generateBtn) {\n                window.domElements.generateBtn.disabled = e.target.value.trim().length === 0 &&\n                    (!window.domElements.pdfInput || !window.domElements.pdfInput.files || !window.domElements.pdfInput.files.length);\n            }\n        });\n    }\n\n    if (window.domElements.pdfInput) {\n        window.domElements.pdfInput.addEventListener('change', (e) => {\n            const file = e.target.files[0];\n            if (file && window.domElements.fileNameDisplay) {\n                window.domElements.fileNameDisplay.textContent = file.name;\n                if (window.domElements.generateBtn) window.domElements.generateBtn.disabled = false;\n            } else if (window.domElements.fileNameDisplay) {\n                window.domElements.fileNameDisplay.textContent = '';\n                if (window.domElements.generateBtn && window.domElements.topicInput) {\n                    window.domElements.generateBtn.disabled = window.domElements.topicInput.value.trim().length === 0;\n                }\n            }\n        });\n    }\n\n    if (window.domElements.generateBtn) window.domElements.generateBtn.disabled = true;\n    if (window.domElements.exportBtn) window.domElements.exportBtn.addEventListener('click', window.exportRoadmap);\n    if (window.domElements.importBtn) window.domElements.importBtn.addEventListener('click', () => window.domElements.importInput.click());\n    if (window.domElements.importInput) window.domElements.importInput.addEventListener('change', window.importRoadmap);\n}\n\nfunction initializeChatInterface() {\n    let isDragging = false;\n    let isResizing = false;\n    let currentX, currentY, initialX, initialY;\n    let xOffset = 0, yOffset = 0;\n    let initialWidth, initialHeight;\n\n    if (window.domElements.chatHeader) {\n        window.domElements.chatHeader.addEventListener('mousedown', (e) => {\n            if (e.target === window.domElements.chatHeader || (window.domElements.chatHeader.contains(e.target) && e.target !== window.domElements.chatToggle && e.target !== window.domElements.resizeHandle)) {\n                isDragging = true;\n                initialX = e.clientX - xOffset;\n                initialY = e.clientY - yOffset;\n                if (window.domElements.chatContainer) window.domElements.chatContainer.style.transition = 'none';\n            }\n        });\n    }\n\n    if (window.domElements.resizeHandle) {\n        window.domElements.resizeHandle.addEventListener('mousedown', (e) => {\n            isResizing = true;\n            initialX = e.clientX;\n            initialY = e.clientY;\n            if (window.domElements.chatContainer) {\n                initialWidth = window.domElements.chatContainer.offsetWidth;\n                initialHeight = window.domElements.chatContainer.offsetHeight;\n                window.domElements.chatContainer.style.transition = 'none';\n            }\n            e.preventDefault();\n        });\n    }\n\n    document.addEventListener('mousemove', (e) => {\n        if (isDragging && window.domElements.chatContainer) {\n            e.preventDefault();\n            currentX = e.clientX - initialX;\n            currentY = e.clientY - initialY;\n            xOffset = currentX;\n            yOffset = currentY;\n            window.domElements.chatContainer.style.transform = `translate3d(${xOffset}px, ${yOffset}px, 0)`;\n        } else if (isResizing && window.domElements.chatContainer) {\n            e.preventDefault();\n            const newWidth = initialWidth + (e.clientX - initialX);\n            const newHeight = initialHeight + (e.clientY - initialY);\n            window.domElements.chatContainer.style.width = `${Math.max(300, newWidth)}px`;\n            window.domElements.chatContainer.style.height = `${Math.max(350, newHeight)}px`;\n        }\n    });\n\n    document.addEventListener('mouseup', () => {\n        if (window.domElements.chatContainer) {\n            if (isDragging || isResizing) {\n                window.domElements.chatContainer.style.transition = '';\n            }\n        }\n        isDragging = false;\n        isResizing = false;\n    });\n\n    if (window.domElements.mainChatToggle) {\n        window.domElements.mainChatToggle.addEventListener('click', () => {\n            if (window.domElements.chatContainer) {\n                const isVisible = window.domElements.chatContainer.style.display === 'flex';\n                window.domElements.chatContainer.style.display = isVisible ? 'none' : 'flex';\n                window.domElements.mainChatToggle.classList.toggle('active', !isVisible);\n                if (window.domElements.chatToggle) window.domElements.chatToggle.textContent = !isVisible ? '−' : '+';\n            }\n        });\n    }\n\n    if (window.domElements.chatToggle) {\n        window.domElements.chatToggle.addEventListener('click', (e) => {\n            e.stopPropagation();\n            if (window.domElements.chatContainer) {\n                window.domElements.chatContainer.style.display = 'none';\n                if (window.domElements.mainChatToggle) window.domElements.mainChatToggle.classList.remove('active');\n            }\n        });\n    }\n\n    if (window.domElements.chatInput) {\n        window.domElements.chatInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') window.sendChatMessage();\n        });\n    }\n    if (window.domElements.chatSend) window.domElements.chatSend.addEventListener('click', window.sendChatMessage);\n}\n\nfunction initializeViewToggle() {\n    const setActiveView = (activeBtn, inactiveBtn, activeContent, inactiveContent) => {\n        if (activeBtn) {\n            activeBtn.classList.add('active', 'bg-purple-700', 'text-white', 'border-purple-900');\n            activeBtn.classList.remove('bg-[#f7f3e9]', 'border-[#d1c7b8]', 'text-[#4a4a4a]');\n        }\n        if (inactiveBtn) {\n            inactiveBtn.classList.remove('active', 'bg-purple-700', 'text-white', 'border-purple-900');\n            inactiveBtn.classList.add('bg-[#f7f3e9]', 'border-[#d1c7b8]', 'text-[#4a4a4a]');\n        }\n        if (activeContent) activeContent.style.display = 'block';\n        if (inactiveContent) inactiveContent.style.display = 'none';\n    };\n\n    if (window.domElements.roadmapViewBtn && window.domElements.checklistViewBtn && window.domElements.learningMapContainer && window.domElements.checklistViewContainer) {\n        setActiveView(window.domElements.roadmapViewBtn, window.domElements.checklistViewBtn, window.domElements.learningMapContainer, window.domElements.checklistViewContainer);\n    }\n\n    if (window.domElements.roadmapViewBtn) {\n        window.domElements.roadmapViewBtn.addEventListener('click', () => {\n            if (window.currentRoadmap) {\n                setActiveView(window.domElements.roadmapViewBtn, window.domElements.checklistViewBtn, window.domElements.learningMapContainer, window.domElements.checklistViewContainer);\n                window.renderLearningMap(window.currentRoadmap);\n            } else {\n                window.showError(\"Please generate or import a roadmap first.\", window.domElements.mapDisplayContainer);\n            }\n        });\n    }\n\n    if (window.domElements.checklistViewBtn) {\n        window.domElements.checklistViewBtn.addEventListener('click', () => {\n            if (window.currentRoadmap) {\n                setActiveView(window.domElements.checklistViewBtn, window.domElements.roadmapViewBtn, window.domElements.checklistViewContainer, window.domElements.learningMapContainer);\n                window.renderChecklistView(window.currentRoadmap);\n            } else {\n                window.showError(\"Please generate or import a roadmap first.\", window.domElements.mapDisplayContainer);\n            }\n        });\n    }\n}\n\nfunction updateProgressUI() {\n    if (!window.domElements.progressContainer || !window.domElements.progressFill || !window.domElements.progressText) {\n        console.warn(\"Progress UI elements not found, skipping update.\");\n        return;\n    }\n    if (!window.currentRoadmap) {\n        window.domElements.progressContainer.style.display = 'none';\n        return;\n    }\n    window.domElements.progressContainer.style.display = 'block';\n\n    let totalItems = 0;\n    let completedItems = 0;\n    const countItems = (item) => {\n        totalItems++;\n        if (item.completed) completedItems++;\n        if (item.subtopics) item.subtopics.forEach(countItems);\n        if (item.skills) {\n            item.skills.forEach(skill => {\n                totalItems++;\n                if (skill.completed) completedItems++;\n            });\n        }\n    };\n\n    if (window.currentRoadmap.fundamentals) window.currentRoadmap.fundamentals.forEach(countItems);\n    if (window.currentRoadmap.intermediate) window.currentRoadmap.intermediate.forEach(countItems);\n    if (window.currentRoadmap.advanced) window.currentRoadmap.advanced.forEach(countItems);\n\n    const percentage = totalItems > 0 ? (completedItems / totalItems) * 100 : 0;\n    window.domElements.progressFill.style.width = `${percentage}%`;\n    window.domElements.progressText.textContent = `${Math.round(percentage)}% Complete (${completedItems} / ${totalItems})`;\n}\n\nfunction runAppInitialization() {\n    console.log(\"Attempting to initialize application...\");\n    cacheDOMElements();\n    console.log(\"DOM Elements after caching:\", window.domElements);\n\n    if (!window.domElements.generateBtn) {\n        console.error(\"Generate button not found in DOM. Initialization aborted.\");\n        window.showError(\"Error: Core UI elements not found. Please ensure HTML is rendered.\", document.body);\n        return;\n    }\n\n    initializeEventListeners();\n    initializeChatInterface();\n    initializeViewToggle();\n    updateProgressUI();\n    console.log(\"Application initialization complete.\");\n}\n\n// Prompt for API key if not set\nif (!window.apiKey) {\n    window.apiKey = prompt(\"Please enter your Gemini API Key:\") || '';\n    if (!window.apiKey) {\n        window.showError(\"API Key is required to use MapItFlow.\", document.body);\n    }\n}\n\n// Start initialization with retry\ncheckAndInit();",
      "status": "[25]<br><span style=\"font-size:8px\">36ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n\t\tCore logic functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      The code cell below contains all the core logic functions associated with extracting text from the PDF and generating learning roadmap\n    </p>\n  </div>\n</div>",
      "status": "",
      "output": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n\t\tCore logic functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      The code cell below contains all the core logic functions associated with extracting text from the PDF and generating learning roadmap\n    </p>\n  </div>\n</div>",
      "type": "html"
    },
    {
      "code": "// --- Core Logic Functions ---\nasync function extractTextFromPDF(file) {\n    try {\n        const arrayBuffer = await file.arrayBuffer();\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        let fullText = '';\n        for (let i = 1; i <= pdf.numPages; i++) {\n            const page = await pdf.getPage(i);\n            const textContent = await page.getTextContent();\n            fullText += textContent.items.map(item => item.str).join(' ') + '\\n';\n        }\n        return fullText;\n    } catch (error) {\n        console.error('Error extracting text from PDF:', error);\n        showError('Failed to extract text from PDF. Please ensure the file is valid.', domElements.mapDisplayContainer);\n        throw error;\n    }\n}\n\nasync function generateLearningMap() {\n    const topic = domElements.topicInput.value.trim();\n    const pdfFile = domElements.pdfInput.files[0];\n\n    if (!topic && !pdfFile) {\n        showError('Please enter a topic or upload a syllabus PDF', domElements.mapDisplayContainer);\n        return;\n    }\n\n    if (!apiKey) {\n        const userApiKey = prompt(\"Please enter your Gemini API Key:\");\n        if (userApiKey) {\n            apiKey = userApiKey;\n        } else {\n            showError('API Key is required to generate the learning map.', domElements.mapDisplayContainer);\n            return;\n        }\n    }\n\n    showLoading(true);\n    clearMapAndChecklist();\n\n    try {\n        let learningStructure;\n        if (pdfFile) {\n            const syllabusText = await extractTextFromPDF(pdfFile);\n            if (!syllabusText) return;\n            learningStructure = await fetchLearningStructureFromSyllabus(syllabusText);\n        } else {\n            learningStructure = await fetchLearningStructure(topic);\n        }\n        currentRoadmap = addCompletionStatus(learningStructure);\n\n        if (domElements.roadmapViewBtn && domElements.roadmapViewBtn.classList.contains('active')) {\n            renderLearningMap(currentRoadmap);\n            if(domElements.learningMapContainer) domElements.learningMapContainer.style.display = 'block';\n            if(domElements.checklistViewContainer) domElements.checklistViewContainer.style.display = 'none';\n        } else {\n            renderChecklistView(currentRoadmap);\n            if(domElements.checklistViewContainer) domElements.checklistViewContainer.style.display = 'block';\n            if(domElements.learningMapContainer) domElements.learningMapContainer.style.display = 'none';\n        }\n\n        if (domElements.chatContainer) domElements.chatContainer.style.display = 'flex';\n        addChatMessage('I\\'ve generated your roadmap. Feel free to ask any questions about it!', 'bot');\n        updateProgressUI();\n    } catch (error) {\n        console.error('Error generating learning map:', error);\n        showError(error.message || 'Failed to generate learning map. Please try again later.', domElements.mapDisplayContainer);\n    } finally {\n        showLoading(false);\n    }\n}\n\nfunction addCompletionStatus(roadmap) {\n    const processItem = (item) => {\n        item.completed = false;\n        if (item.subtopics) {\n            item.subtopics.forEach(subtopic => {\n                subtopic.completed = false;\n                if (subtopic.skills) {\n                    subtopic.skills = subtopic.skills.map(skill =>\n                        typeof skill === 'string' ? { name: skill, completed: false } : { ...skill, completed: false }\n                    );\n                } else {\n                    subtopic.skills = []; // Ensure skills array exists\n                }\n            });\n        } else {\n            item.subtopics = []; // Ensure subtopics array exists\n        }\n         if (!item.skills) item.skills = []; // Ensure skills array exists at item level too if applicable by schema\n    };\n    if (roadmap.fundamentals) roadmap.fundamentals.forEach(processItem);\n    if (roadmap.intermediate) roadmap.intermediate.forEach(processItem);\n    if (roadmap.advanced) roadmap.advanced.forEach(processItem);\n    if (!roadmap.title) roadmap.title = \"Untitled Roadmap\"; // Add default title if missing\n    if (!roadmap.description) roadmap.description = \"\"; // Add default description if missing\n\n    return roadmap;\n}\n\nasync function fetchApi(promptText) {\n    if (!apiKey) {\n        throw new Error('API Key is not set. Please provide an API Key.');\n    }\n    const response = await fetch(`${apiUrl}?key=${apiKey}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            contents: [{ parts: [{ text: promptText }] }],\n            generationConfig: {\n                responseMimeType: \"application/json\",\n                temperature: 0.5,\n                topP: 0.9,\n                maxOutputTokens: 4096\n            }\n        })\n    });\n\n    if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error(\"API Error Response:\", errorData);\n        let errorMsg = `API request failed: ${response.status}`;\n        if (errorData.error && errorData.error.message) {\n            errorMsg += ` - ${errorData.error.message}`;\n            if (errorData.error.message.includes(\"API key not valid\")) {\n                apiKey = '';\n                throw new Error('API key not valid. Please check your API Key and try again.');\n            }\n        }\n        throw new Error(errorMsg);\n    }\n    const data = await response.json();\n    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {\n        try {\n            return JSON.parse(data.candidates[0].content.parts[0].text);\n        } catch (e) {\n            console.error(\"Failed to parse JSON from API:\", data.candidates[0].content.parts[0].text, e);\n            throw new Error('API returned malformed JSON.');\n        }\n    } else if (typeof data === 'object' && data.title) {\n        return data;\n    } else {\n        console.error(\"Unexpected API response structure:\", data);\n        throw new Error('Unexpected API response structure.');\n    }\n}\n\nasync function fetchLearningStructureFromSyllabus(syllabusText) {\n    const prompt = `Analyze this syllabus and create a comprehensive learning map.\n    Return a JSON object with the structure:\n    {\n        \"title\": \"Main topic from syllabus\",\n        \"description\": \"Brief overview of the syllabus content\",\n        \"fundamentals\": [ { \"title\": \"Fundamental Area 1\", \"description\": \"...\", \"subtopics\": [ { \"title\": \"Subtopic 1.1\", \"description\": \"...\", \"skills\": [\"Skill A\", \"Skill B\"] } ] } ],\n        \"intermediate\": [ /* similar structure */ ],\n        \"advanced\": [ /* similar structure */ ]\n    }\n    Extract key topics and structure them logically. Provide 2-4 items per level (fundamentals, intermediate, advanced).\n    Each item should have 1-3 subtopics. Each subtopic should list 2-4 specific skills.\n    Keep descriptions concise (1-2 sentences). Ensure valid JSON output.\n\n    Syllabus text:\n    ${syllabusText.substring(0, 30000)}\n    `;\n    return fetchApi(prompt);\n}\n\nasync function fetchLearningStructure(topic) {\n    const prompt = `Create a comprehensive learning map for \"${topic}\".\n    Return a JSON object with the structure:\n    {\n        \"title\": \"Learning ${topic}\",\n        \"description\": \"A structured roadmap to learn ${topic}\",\n        \"fundamentals\": [ { \"title\": \"Fundamental Concept 1\", \"description\": \"...\", \"subtopics\": [ { \"title\": \"Subtopic 1.1\", \"description\": \"...\", \"skills\": [\"Skill X\", \"Skill Y\"] } ] } ],\n        \"intermediate\": [ /* similar structure */ ],\n        \"advanced\": [ /* similar structure */ ]\n    }\n    Provide 2-4 items per level. Each item 1-3 subtopics. Each subtopic 2-4 skills.\n    Descriptions concise. Ensure valid JSON.`;\n    return fetchApi(prompt);\n}",
      "status": "[26]<br><span style=\"font-size:8px\">36ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      Rendering functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      Functions in the code cell below are responsible for rendering of Roadmap after the API call\n    </p>\n  </div>\n</div>",
      "status": "",
      "output": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      Rendering functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      Functions in the code cell below are responsible for rendering of Roadmap after the API call\n    </p>\n  </div>\n</div>",
      "type": "html"
    },
    {
      "code": "// --- Rendering Functions ---\nfunction renderLearningMap(structure) {\n    if (!domElements.learningMapContainer || !structure) return;\n    domElements.learningMapContainer.innerHTML = '';\n    domElements.learningMapContainer.classList.remove('hidden');\n    domElements.learningMapContainer.style.display = 'block';\n\n    const mainNode = createTopicNode(structure.title, structure.description, 0, [], 'map');\n    domElements.learningMapContainer.appendChild(mainNode);\n\n    const levels = [\n        { name: 'Fundamentals', data: structure.fundamentals, path: ['fundamentals'] },\n        { name: 'Intermediate', data: structure.intermediate, path: ['intermediate'] },\n        { name: 'Advanced', data: structure.advanced, path: ['advanced'] }\n    ];\n\n    levels.forEach(levelInfo => {\n        if (levelInfo.data && levelInfo.data.length > 0) {\n            if (domElements.learningMapContainer.children.length > 1 || levelInfo.path[0] !== 'fundamentals') {\n                domElements.learningMapContainer.appendChild(createConnectionLine());\n            }\n            domElements.learningMapContainer.appendChild(createLevelSection(levelInfo.name, levelInfo.data, 1, levelInfo.path, 'map'));\n        }\n    });\n}\n\nfunction createTopicNode(title, description, level, skills = [], viewType = 'map', path = []) {\n    const node = document.createElement('div');\n    node.className = `topic-node level-${level} bg-white border-2 border-gray-700 rounded-lg p-3 sm:p-4 m-2.5 transition-all duration-200 ease-out cursor-default relative`;\n\n    const levelStyles = [\n        'bg-[#eef2f7] border-[3px] border-solid text-lg sm:text-xl mx-auto font-bold text-center max-w-md sm:max-w-lg p-4 sm:p-6',\n        'bg-yellow-100 border-dashed border-yellow-600 font-semibold max-w-sm sm:max-w-md',\n        'bg-green-50 border-green-500 max-w-xs sm:max-w-sm',\n        'bg-gray-50 border-gray-400 border-dotted text-sm max-w-xs sm:max-w-xs p-2 sm:p-3'\n    ];\n    if (level >= 0 && level < levelStyles.length) {\n        node.classList.add(...levelStyles[level].split(' '));\n    }\n\n    const titleElement = document.createElement('div');\n    titleElement.className = 'node-title font-bold mb-1.5 text-gray-800';\n    titleElement.textContent = title || \"Untitled Topic\";\n    if (level === 0) titleElement.classList.add('text-slate-700');\n    if (level === 1) titleElement.classList.add('text-yellow-800');\n    node.appendChild(titleElement);\n\n    if (description) {\n        const descElement = document.createElement('div');\n        descElement.className = 'node-description text-sm opacity-85 leading-normal text-black';\n        descElement.innerHTML = marked.parseInline(description);\n        node.appendChild(descElement);\n    }\n\n    if (skills && skills.length > 0 && viewType === 'map') {\n        const skillsList = document.createElement('div');\n        skillsList.className = 'skills-list mt-2.5 text-xs opacity-70 italic';\n        skillsList.innerHTML = `<strong>Skills:</strong> ${skills.map(s => typeof s === 'string' ? s : s.name).join(', ')}`;\n        node.appendChild(skillsList);\n    }\n    return node;\n}\n\nfunction createLevelSection(levelName, items, baseLevel, parentPath = [], viewType = 'map') {\n    const section = document.createElement('div');\n    section.className = 'level-container my-5 text-center';\n\n    const levelTitle = document.createElement('div');\n    levelTitle.className = 'level-title text-lg sm:text-xl font-bold text-gray-700 mb-4 italic border-b border-gray-300 inline-block pb-1';\n    levelTitle.textContent = levelName;\n    section.appendChild(levelTitle);\n    section.appendChild(createConnectionLine());\n\n    const itemsContainer = document.createElement('div');\n    itemsContainer.className = 'children-container flex flex-wrap justify-center gap-4 mt-4 pt-2.5 border-t border-dashed border-gray-400 md:flex-row';\n\n    items.forEach((item, index) => {\n        const currentPath = [...parentPath, index];\n        const itemNode = createTopicNode(item.title, item.description, baseLevel, [], viewType, currentPath);\n\n        if (item.subtopics && item.subtopics.length > 0) {\n            itemNode.appendChild(createConnectionLine());\n            const subtopicsContainer = document.createElement('div');\n            subtopicsContainer.className = 'children-container flex flex-wrap justify-center gap-2.5 mt-2.5 pt-2.5 border-t border-dashed border-gray-300';\n            item.subtopics.forEach((subtopic, subIndex) => {\n                const subtopicPath = [...currentPath, 'subtopics', subIndex];\n                const subtopicNode = createTopicNode(subtopic.title, subtopic.description, baseLevel + 1, subtopic.skills, viewType, subtopicPath);\n                subtopicsContainer.appendChild(subtopicNode);\n            });\n            itemNode.appendChild(subtopicsContainer);\n        }\n        itemsContainer.appendChild(itemNode);\n    });\n    section.appendChild(itemsContainer);\n    return section;\n}\n\nfunction renderChecklistView(structure) {\n    if (!domElements.checklistViewContainer || !structure) return;\n    domElements.checklistViewContainer.innerHTML = '';\n    domElements.checklistViewContainer.classList.remove('hidden');\n    domElements.checklistViewContainer.style.display = 'block';\n\n    const mainTitle = document.createElement('h2');\n    mainTitle.className = 'text-xl sm:text-2xl font-bold text-purple-700 mb-6 text-center';\n    mainTitle.textContent = (structure.title || \"Roadmap\") + \" - Checklist\";\n    domElements.checklistViewContainer.appendChild(mainTitle);\n\n    const levels = [\n        { name: 'Fundamentals', data: structure.fundamentals, path: ['fundamentals'] },\n        { name: 'Intermediate', data: structure.intermediate, path: ['intermediate'] },\n        { name: 'Advanced', data: structure.advanced, path: ['advanced'] }\n    ];\n\n    levels.forEach(levelInfo => {\n        if (levelInfo.data && levelInfo.data.length > 0) {\n            const sectionDiv = document.createElement('div');\n            sectionDiv.className = 'checklist-section mb-8';\n            const sectionTitle = document.createElement('h3');\n            sectionTitle.className = 'checklist-section-title text-lg sm:text-xl text-[#4a4a4a] mb-4 pb-1 border-b border-dashed border-[#d1c7b8]';\n            sectionTitle.textContent = levelInfo.name;\n            sectionDiv.appendChild(sectionTitle);\n            levelInfo.data.forEach((item, itemIndex) => {\n                const itemPath = [...levelInfo.path, itemIndex];\n                sectionDiv.appendChild(createChecklistItem(item, itemPath, 0));\n            });\n            domElements.checklistViewContainer.appendChild(sectionDiv);\n        }\n    });\n    updateProgressUI();\n}\n\nfunction createChecklistItem(itemData, path, indentLevel = 0) {\n    const itemDiv = document.createElement('div');\n    itemDiv.className = `checklist-item flex items-start gap-2.5 mb-3 p-2.5 bg-white rounded-md border border-[#e9e0d2] transition-all duration-200 hover:bg-[#faf6ef] ${itemData.completed ? 'completed bg-green-50 border-green-400' : ''}`;\n    if (indentLevel > 0) itemDiv.style.marginLeft = `${indentLevel * 20}px`;\n\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.className = 'checklist-checkbox mt-1 w-4 h-4 sm:w-5 sm:h-5 cursor-pointer accent-purple-600 flex-shrink-0';\n    checkbox.checked = !!itemData.completed;\n    checkbox.addEventListener('change', (e) => {\n        updateItemCompletion(path, e.target.checked);\n        renderChecklistView(currentRoadmap); \n        updateProgressUI();\n    });\n\n    const contentDiv = document.createElement('div');\n    contentDiv.className = 'checklist-content flex-1';\n\n    const title = document.createElement('div');\n    title.className = `checklist-title font-semibold mb-1 text-gray-800 ${itemData.completed ? 'line-through text-gray-500' : ''}`;\n    title.textContent = itemData.title || \"Untitled Item\";\n    contentDiv.appendChild(title);\n\n    if (itemData.description) {\n        const description = document.createElement('div');\n        description.className = `checklist-description text-sm text-gray-600 mb-2 ${itemData.completed ? 'line-through text-gray-500' : ''}`;\n        description.innerHTML = marked.parseInline(itemData.description);\n        contentDiv.appendChild(description);\n    }\n    itemDiv.appendChild(checkbox);\n    itemDiv.appendChild(contentDiv);\n\n    if (itemData.subtopics && itemData.subtopics.length > 0) {\n        const subitemsContainer = document.createElement('div');\n        subitemsContainer.className = 'checklist-subitems mt-2 pl-5';\n        itemData.subtopics.forEach((subtopic, subIndex) => {\n            const subtopicPath = [...path, 'subtopics', subIndex];\n            subitemsContainer.appendChild(createChecklistItem(subtopic, subtopicPath, indentLevel + 1));\n        });\n        contentDiv.appendChild(subitemsContainer);\n    }\n\n    if (itemData.skills && itemData.skills.length > 0) {\n        const skillsContainer = document.createElement('div');\n        skillsContainer.className = 'checklist-subitems mt-2 pl-5';\n        itemData.skills.forEach((skill, skillIndex) => {\n            const skillObj = typeof skill === 'string' ? { name: skill, completed: false } : skill;\n            const skillPath = [...path, 'skills', skillIndex];\n            const skillDiv = document.createElement('div');\n            skillDiv.className = `checklist-subitem flex items-center gap-2 mb-1 text-sm ${skillObj.completed ? 'completed line-through text-gray-500' : 'text-gray-700'}`;\n            if (indentLevel > 0) skillDiv.style.marginLeft = `${(indentLevel + 1) * 10}px`;\n\n            const skillCheckbox = document.createElement('input');\n            skillCheckbox.type = 'checkbox';\n            skillCheckbox.className = 'w-3.5 h-3.5 sm:w-4 sm:h-4 cursor-pointer accent-purple-500 flex-shrink-0';\n            skillCheckbox.checked = !!skillObj.completed; \n            skillCheckbox.addEventListener('change', (e) => {\n                updateItemCompletion(skillPath, e.target.checked);\n                \n                renderChecklistView(currentRoadmap); \n                updateProgressUI();\n\t\t\t\tif (e.target.checked) {\n\t\t\t\t  confetti({\n\t\t\t\t\tparticleCount: 500,\n\t\t\t\t\tspread: 700,\n\t\t\t\t\torigin: { y: 0.6 }\n\t\t\t\t  });\n      }\n            });\n            const skillLabel = document.createElement('span');\n            skillLabel.textContent = skillObj.name || \"Untitled Skill\";\n            skillDiv.appendChild(skillCheckbox);\n            skillDiv.appendChild(skillLabel);\n            skillsContainer.appendChild(skillDiv);\n        });\n        contentDiv.appendChild(skillsContainer);\n    }\n    return itemDiv;\n}\n\nfunction updateItemCompletion(path, isCompleted) {\n    let current = currentRoadmap;\n    for (let i = 0; i < path.length - 1; i++) {\n        if (!current[path[i]]) { \n            console.error(\"Invalid path in updateItemCompletion:\", path, current);\n            return;\n        }\n        current = current[path[i]];\n    }\n    const targetItem = current[path[path.length - 1]];\n    if (targetItem) {\n        targetItem.completed = isCompleted;\n        if (!isCompleted) { \n            const uncheckChildren = (item) => {\n                item.completed = false;\n                if (item.skills) item.skills.forEach(skill => skill.completed = false);\n                if (item.subtopics) item.subtopics.forEach(uncheckChildren);\n            };\n             if (path[path.length-2] !== 'skills') {\n                uncheckChildren(targetItem);\n            }\n        } else { \n             checkParentCompletion(path.slice(0, -2)); // Check parent of the modified item\n        }\n    }\n}\n\nfunction checkParentCompletion(parentPathArray) {\n    if (!parentPathArray || parentPathArray.length === 0) return;\n\n    let parent = currentRoadmap;\n    for (let i = 0; i < parentPathArray.length; i++) {\n        if (!parent[parentPathArray[i]]) return; // Path invalid\n        parent = parent[parentPathArray[i]];\n    }\n   \n    let allChildrenCompleted = true;\n    if (parent.subtopics && parent.subtopics.length > 0) {\n        allChildrenCompleted = parent.subtopics.every(st => st.completed);\n    } else if (parent.skills && parent.skills.length > 0 && !parent.subtopics) {\n        allChildrenCompleted = parent.skills.every(sk => sk.completed);\n    } else if (!parent.subtopics && !parent.skills) {\n\n        return;\n    }\n\n\n    if (allChildrenCompleted) {\n        parent.completed = true;\n    }\n    if (parentPathArray.length > 1) { \n        checkParentCompletion(parentPathArray.slice(0, parentPathArray.length % 2 === 0 ? -2 : -1 )); \n    }\n}\n\nfunction updateProgressUI() {\n    if (!domElements.progressContainer || !domElements.progressFill || !domElements.progressText) return;\n    if (!currentRoadmap) {\n        domElements.progressContainer.style.display = 'none';\n        return;\n    }\n    domElements.progressContainer.style.display = 'block';\n\n    let totalItems = 0;\n    let completedItems = 0;\n    const countItems = (item) => {\n        totalItems++;\n        if (item.completed) completedItems++;\n        if (item.subtopics) item.subtopics.forEach(countItems);\n        if (item.skills) {\n            item.skills.forEach(skill => {\n                totalItems++;\n                if (skill.completed) completedItems++;\n            });\n        }\n    };\n\n    if (currentRoadmap.fundamentals) currentRoadmap.fundamentals.forEach(countItems);\n    if (currentRoadmap.intermediate) currentRoadmap.intermediate.forEach(countItems);\n    if (currentRoadmap.advanced) currentRoadmap.advanced.forEach(countItems);\n\n    const percentage = totalItems > 0 ? (completedItems / totalItems) * 100 : 0;\n    domElements.progressFill.style.width = `${percentage}%`;\n    domElements.progressText.textContent = `${Math.round(percentage)}% Complete (${completedItems} / ${totalItems})`;\n}\n\nfunction createConnectionLine() {\n    const line = document.createElement('div');\n    line.className = 'connection-line w-1 h-8 bg-gray-500 mx-auto rounded-sm my-1';\n    return line;\n}",
      "status": "[27]<br><span style=\"font-size:8px\">31ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      UI Utility functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      The code cell below contains UI utility functions\n    </p>\n  </div>\n</div>",
      "status": "",
      "output": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      UI Utility functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      The code cell below contains UI utility functions\n    </p>\n  </div>\n</div>",
      "type": "html"
    },
    {
      "code": "// --- UI Utility Functions ---\nfunction showLoading(show) {\n    if (domElements.loadingIndicator) domElements.loadingIndicator.style.display = show ? 'block' : 'none';\n    if (domElements.generateBtn) {\n        domElements.generateBtn.disabled = show;\n        domElements.generateBtn.textContent = show ? 'Generating...' : 'Generate Map';\n    }\n}\n\nfunction clearMapAndChecklist() {\n    if (domElements.learningMapContainer) {\n        domElements.learningMapContainer.innerHTML = '';\n        domElements.learningMapContainer.style.display = 'none';\n    }\n    if (domElements.checklistViewContainer) {\n        domElements.checklistViewContainer.innerHTML = '';\n        domElements.checklistViewContainer.style.display = 'none';\n    }\n    const errorContainer = domElements.mapDisplayContainer ? domElements.mapDisplayContainer.querySelector('.error-message') : null;\n    if (errorContainer) errorContainer.remove();\n}\n\nfunction showError(message, container = domElements.mapDisplayContainer) {\n    clearMapAndChecklist();\n    if (!container) container = document.body;\n\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'error-message bg-red-100 text-red-700 p-4 rounded-md my-5 text-center border border-red-400';\n    errorDiv.textContent = message;\n\n    if (container.firstChild) {\n        container.insertBefore(errorDiv, container.firstChild);\n    } else {\n        container.appendChild(errorDiv);\n    }\n}",
      "status": "[28]<br><span style=\"font-size:8px\">39ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      Chat and Import Export related functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      Following two code cells contains functions related to chat with AI and Import Export roadmap functionality\n    </p>\n  </div>\n</div>",
      "status": "",
      "output": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      Chat and Import Export related functions\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      Following two code cells contains functions related to chat with AI and Import Export roadmap functionality\n    </p>\n  </div>\n</div>",
      "type": "html"
    },
    {
      "code": "// --- Chat Functions ---\nasync function sendChatMessage() {\n    if (!domElements.chatInput) return;\n    const message = domElements.chatInput.value.trim();\n    if (!message) return;\n\n    if (!currentRoadmap) {\n        addChatMessage(\"Please generate or import a roadmap first before asking questions.\", \"bot\");\n        return;\n    }\n    if (!apiKey) {\n        const userApiKey = prompt(\"Please enter your Gemini API Key to use the chat feature:\");\n        if (userApiKey) apiKey = userApiKey;\n        else {\n            addChatMessage('API Key is required for chat.', 'bot');\n            return;\n        }\n    }\n\n    addChatMessage(message, 'user');\n    domElements.chatInput.value = '';\n    if (domElements.chatLoadingIndicator) domElements.chatLoadingIndicator.style.display = 'block';\n\n    try {\n        const response = await getChatResponse(message);\n        addChatMessage(response, 'bot');\n    } catch (error) {\n        console.error('Chat error:', error);\n        addChatMessage(error.message || 'Sorry, I encountered an error. Please try again.', 'bot');\n    } finally {\n        if (domElements.chatLoadingIndicator) domElements.chatLoadingIndicator.style.display = 'none';\n    }\n}\n\nfunction addChatMessage(message, type) {\n    if (!domElements.chatMessagesContainer) return;\n    const messageDiv = document.createElement('div');\n    messageDiv.classList.add('message', 'mb-4', 'p-3', 'rounded-lg', 'max-w-[85%]', 'leading-normal', 'break-words');\n\n    if (type === 'user') {\n        messageDiv.classList.add('user-message', 'bg-blue-100', 'ml-auto', 'text-blue-800');\n        messageDiv.textContent = message;\n    } else {\n        messageDiv.classList.add('bot-message', 'bg-gray-100', 'mr-auto', 'text-gray-800');\n        messageDiv.innerHTML = marked.parse(message);\n    }\n    domElements.chatMessagesContainer.appendChild(messageDiv);\n    domElements.chatMessagesContainer.scrollTop = domElements.chatMessagesContainer.scrollHeight;\n    chatHistory.push({ type, message });\n}\n\nasync function getChatResponse(userMessage) {\n    if (!apiKey) throw new Error('API Key is not set for chat.');\n    const prompt = `You are an AI assistant helping a user understand their learning roadmap.\n    Current Roadmap: ${JSON.stringify(currentRoadmap, null, 2)}\n    User's question: \"${userMessage}\"\n    Previous conversation (last 5): ${chatHistory.slice(-5).map(e => `${e.type}: ${e.message}`).join('\\n')}\n    Respond helpfully based ONLY on the roadmap. If unrelated, politely state so. Use Markdown.`;\n\n    const response = await fetch(`${apiUrl}?key=${apiKey}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            contents: [{ parts: [{ text: prompt }] }],\n            generationConfig: { temperature: 0.7, topP: 0.9, maxOutputTokens: 1024 }\n        })\n    });\n    if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error(\"Chat API Error:\", errorData);\n        let errorMsg = `Chat API request failed: ${response.status}`;\n        if (errorData.error?.message) {\n            errorMsg += ` - ${errorData.error.message}`;\n            if (errorData.error.message.includes(\"API key not valid\")) apiKey = '';\n        }\n        throw new Error(errorMsg);\n    }\n    const data = await response.json();\n    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {\n        return data.candidates[0].content.parts[0].text;\n    }\n    throw new Error('No valid response from chat API.');\n}",
      "status": "[29]<br><span style=\"font-size:8px\">38ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// --- Import/Export Functions ---\nfunction exportRoadmap() {\n    if (!currentRoadmap) {\n        showError('No roadmap to export', domElements.mapDisplayContainer);\n        return;\n    }\n    const dataStr = JSON.stringify(currentRoadmap, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n    const exportFileDefaultName = `learning-roadmap-${(currentRoadmap.title || \"untitled\").replace(/\\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n}\n\nasync function importRoadmap(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    showLoading(true);\n    clearMapAndChecklist();\n    try {\n        const text = await file.text();\n        const roadmap = JSON.parse(text);\n        if (!roadmap.title || (!roadmap.fundamentals && !roadmap.intermediate && !roadmap.advanced)) {\n            throw new Error('Invalid roadmap format.');\n        }\n        currentRoadmap = addCompletionStatus(roadmap);\n\n        if (domElements.roadmapViewBtn && domElements.roadmapViewBtn.classList.contains('active')) {\n            renderLearningMap(currentRoadmap);\n             if(domElements.learningMapContainer) domElements.learningMapContainer.style.display = 'block';\n            if(domElements.checklistViewContainer) domElements.checklistViewContainer.style.display = 'none';\n        } else {\n            renderChecklistView(currentRoadmap);\n            if(domElements.checklistViewContainer) domElements.checklistViewContainer.style.display = 'block';\n            if(domElements.learningMapContainer) domElements.learningMapContainer.style.display = 'none';\n        }\n\n        if (domElements.chatContainer) domElements.chatContainer.style.display = 'flex';\n        addChatMessage('I\\'ve loaded your roadmap. Feel free to ask questions!', 'bot');\n        updateProgressUI();\n    } catch (error) {\n        console.error('Import error:', error);\n        showError(`Failed to import: ${error.message}. Ensure valid JSON.`, domElements.mapDisplayContainer);\n    } finally {\n        showLoading(false);\n        if (event.target) event.target.value = null;\n    }\n}\n\ndocument.querySelectorAll('input[type=\"checkbox\"]').forEach((checkbox) => {\n  checkbox.addEventListener(\"change\", (e) => {\n    if (e.target.checked) {\n      confetti({\n        particleCount: 500,\n        spread: 700,\n        origin: { y: 0.6 }\n      });\n    }\n  });\n});\n",
      "status": "[30]<br><span style=\"font-size:8px\">36ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      THANK YOU\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      We hope you find this project interesting and useful - Team Bit Coders\n    </p>\n  </div>\n</div>",
      "status": "",
      "output": "<div class=\"h-32 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4\">\n  <div class=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-4 w-full max-w-2xl text-center shadow-md\">\n    <h2 class=\"text-lg font-semibold text-white mb-1\">\n      THANK YOU\n    </h2>\n    <p class=\"text-gray-300 text-sm\">\n      We hope you find this project interesting and useful - Team Bit Coders\n    </p>\n  </div>\n</div>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}